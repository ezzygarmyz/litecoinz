// Copyright (c) 2012-2019 The Bitcoin Core developers
// Copyright (c) 2017-2020 The LitecoinZ Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <bloom.h>

#include <clientversion.h>
#include <key.h>
#include <key_io.h>
#include <merkleblock.h>
#include <primitives/block.h>
#include <random.h>
#include <serialize.h>
#include <streams.h>
#include <uint256.h>
#include <util/system.h>
#include <util/strencodings.h>
#include <test/setup_common.h>

#include <vector>

#include <boost/test/unit_test.hpp>

BOOST_FIXTURE_TEST_SUITE(bloom_tests, BasicTestingSetup)

BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)
{
    CBloomFilter filter(3, 0.01, 0, BLOOM_UPDATE_ALL);

    filter.insert(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
    BOOST_CHECK_MESSAGE( filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter doesn't contain just-inserted object!");
    // One bit different in first byte
    BOOST_CHECK_MESSAGE(!filter.contains(ParseHex("19108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter contains something it shouldn't!");

    filter.insert(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")), "Bloom filter doesn't contain just-inserted object (2)!");

    filter.insert(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5")), "Bloom filter doesn't contain just-inserted object (3)!");

    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);
    stream << filter;

    std::vector<unsigned char> vch = ParseHex("03614e9b050000000000000001");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());

    BOOST_CHECK_MESSAGE( filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter doesn't contain just-inserted object!");
    filter.clear();
    BOOST_CHECK_MESSAGE( !filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter should be empty!");
}

BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)
{
    // Same test as bloom_create_insert_serialize, but we add a nTweak of 100
    CBloomFilter filter(3, 0.01, 2147483649UL, BLOOM_UPDATE_ALL);

    filter.insert(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
    BOOST_CHECK_MESSAGE( filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter doesn't contain just-inserted object!");
    // One bit different in first byte
    BOOST_CHECK_MESSAGE(!filter.contains(ParseHex("19108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter contains something it shouldn't!");

    filter.insert(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")), "Bloom filter doesn't contain just-inserted object (2)!");

    filter.insert(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5")), "Bloom filter doesn't contain just-inserted object (3)!");

    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);
    stream << filter;

    std::vector<unsigned char> vch = ParseHex("03ce4299050000000100008001");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());
}

BOOST_AUTO_TEST_CASE(bloom_create_insert_key)
{
    std::string strSecret = std::string("5Kg1gnAjaLfKiwhhPpGS3QfRg2m6awQvaj98JCZBZQ5SuS2F15C");
    CKey key = DecodeSecret(strSecret);
    CPubKey pubkey = key.GetPubKey();
    std::vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());

    CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);
    filter.insert(vchPubKey);
    uint160 hash = pubkey.GetID();
    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));

    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);
    stream << filter;

    std::vector<unsigned char> vch = ParseHex("038fc16b080000000000000001");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());
}

BOOST_AUTO_TEST_CASE(bloom_match)
{
    // Random real transaction (b4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b)
    CDataStream stream(ParseHex("01000000010b26e9b7735eb6aabdf358bab62f9816a21ba9ebdb719d5299e88607d722c190000000008b4830450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a0141046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339ffffffff021bff3d11000000001976a91404943fdd508053c75000106d3bc6e2754dbcff1988ac2f15de00000000001976a914a266436d2965547608b9e15d9032a7b9d64fa43188ac00000000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx(deserialize, stream);

    // and one which spends it (e2769b09e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436)
    unsigned char ch[] = {0x01, 0x00, 0x00, 0x00, 0x01, 0x6b, 0xff, 0x7f, 0xcd, 0x4f, 0x85, 0x65, 0xef, 0x40, 0x6d, 0xd5, 0xd6, 0x3d, 0x4f, 0xf9, 0x4f, 0x31, 0x8f, 0xe8, 0x20, 0x27, 0xfd, 0x4d, 0xc4, 0x51, 0xb0, 0x44, 0x74, 0x01, 0x9f, 0x74, 0xb4, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x49, 0x30, 0x46, 0x02, 0x21, 0x00, 0xda, 0x0d, 0xc6, 0xae, 0xce, 0xfe, 0x1e, 0x06, 0xef, 0xdf, 0x05, 0x77, 0x37, 0x57, 0xde, 0xb1, 0x68, 0x82, 0x09, 0x30, 0xe3, 0xb0, 0xd0, 0x3f, 0x46, 0xf5, 0xfc, 0xf1, 0x50, 0xbf, 0x99, 0x0c, 0x02, 0x21, 0x00, 0xd2, 0x5b, 0x5c, 0x87, 0x04, 0x00, 0x76, 0xe4, 0xf2, 0x53, 0xf8, 0x26, 0x2e, 0x76, 0x3e, 0x2d, 0xd5, 0x1e, 0x7f, 0xf0, 0xbe, 0x15, 0x77, 0x27, 0xc4, 0xbc, 0x42, 0x80, 0x7f, 0x17, 0xbd, 0x39, 0x01, 0x41, 0x04, 0xe6, 0xc2, 0x6e, 0xf6, 0x7d, 0xc6, 0x10, 0xd2, 0xcd, 0x19, 0x24, 0x84, 0x78, 0x9a, 0x6c, 0xf9, 0xae, 0xa9, 0x93, 0x0b, 0x94, 0x4b, 0x7e, 0x2d, 0xb5, 0x34, 0x2b, 0x9d, 0x9e, 0x5b, 0x9f, 0xf7, 0x9a, 0xff, 0x9a, 0x2e, 0xe1, 0x97, 0x8d, 0xd7, 0xfd, 0x01, 0xdf, 0xc5, 0x22, 0xee, 0x02, 0x28, 0x3d, 0x3b, 0x06, 0xa9, 0xd0, 0x3a, 0xcf, 0x80, 0x96, 0x96, 0x8d, 0x7d, 0xbb, 0x0f, 0x91, 0x78, 0xff, 0xff, 0xff, 0xff, 0x02, 0x8b, 0xa7, 0x94, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xba, 0xde, 0xec, 0xfd, 0xef, 0x05, 0x07, 0x24, 0x7f, 0xc8, 0xf7, 0x42, 0x41, 0xd7, 0x3b, 0xc0, 0x39, 0x97, 0x2d, 0x7b, 0x88, 0xac, 0x40, 0x94, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x19, 0x76, 0xa9, 0x14, 0xc1, 0x09, 0x32, 0x48, 0x3f, 0xec, 0x93, 0xed, 0x51, 0xf5, 0xfe, 0x95, 0xe7, 0x25, 0x59, 0xf2, 0xcc, 0x70, 0x43, 0xf9, 0x88, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00};
    std::vector<unsigned char> vch(ch, ch + sizeof(ch) -1);
    CDataStream spendStream(vch, SER_DISK, CLIENT_VERSION);
    CTransaction spendingTx(deserialize, spendStream);

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(uint256S("0xb4749f017444b051c44dfd2720e88f314ff94f3dd6d56d40ef65854fcd7fff6b"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match tx hash");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // byte-reversed tx hash
    filter.insert(ParseHex("6bff7fcd4f8565ef406dd5d63d4ff94f318fe82027fd4dc451b04474019f74b4"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match manually serialized tx hash");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("30450220070aca44506c5cef3a16ed519d7c3c39f8aab192c4e1c90d065f37b8a4af6141022100a8e160b856c2d43d27d8fba71e5aef6405b8643ac4cb7cb3c462aced7f14711a01"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match input signature");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("046d11fee51b0e60666d5049a9101a72741df480b96ee26488a4d3466b95c9a40ac5eeef87e10a5cd336c19a84565f80fa6c547957b7700ff4dfbdefe76036c339"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match input pub key");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("04943fdd508053c75000106d3bc6e2754dbcff19"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match output address");
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx), "Simple Bloom filter didn't add output");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("a266436d2965547608b9e15d9032a7b9d64fa431"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match output address");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(COutPoint(uint256S("0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"), 0));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match COutPoint");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    COutPoint prevOutPoint(uint256S("0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"), 0);
    {
        std::vector<unsigned char> data(32 + sizeof(unsigned int));
        memcpy(data.data(), prevOutPoint.hash.begin(), 32);
        memcpy(data.data()+32, &prevOutPoint.n, sizeof(unsigned int));
        filter.insert(data);
    }
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match manually serialized COutPoint");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(uint256S("00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436"));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched random tx hash");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("0000006d2965547608b9e15d9032a7b9d64fa431"));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched random address");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(COutPoint(uint256S("0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"), 1));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched COutPoint for an output we didn't care about");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(COutPoint(uint256S("0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"), 0));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched COutPoint for an output we didn't care about");
}

BOOST_AUTO_TEST_CASE(merkle_block_1)
{
    CBlock block = getBlock13b8a();
    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the last transaction
    filter.insert(uint256S("0xbb29c4c583f34cfb7aa8acbd1b350a6fe6fb753c1cbf3293d2d16bea2d49a525"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());

    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 1U);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0xbb29c4c583f34cfb7aa8acbd1b350a6fe6fb753c1cbf3293d2d16bea2d49a525"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 1);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Also match the 1st transaction
    filter.insert(uint256S("0xcf042805bd51092595a82dbc79045d602e15ddc633e63093cb7546fdd186e751"));
    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0xcf042805bd51092595a82dbc79045d602e15ddc633e63093cb7546fdd186e751"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_2)
{
    // Random real block (0000005817bbfac27f4887fc711b6dfa707e6433a464fe722770e37c80f9daca)
    // With 3 txes
    CBlock block;
    CDataStream stream(ParseHex(""), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the first transaction
    filter.insert(uint256S("0x3dd14005e33207042f3ecb9ac198bf137297ae4dbec84c515bbc6f73d09af774"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x3dd14005e33207042f3ecb9ac198bf137297ae4dbec84c515bbc6f73d09af774"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Match an output from the second transaction (the pubkey for address L1BDVRhZHkwpNcyxwt33NFYZPE3M5LCzcjb)
    // This should match the third transaction because it spends the output matched
    // It also matches the fourth transaction, which spends to the pubkey again
    filter.insert(ParseHex("261592f28c2b580017b2d32179bb43481b428379"));

    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);

    BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256S("0xde8ace7950d2204eb216481e21b2bf5aeb53633a1fc384140267b8246c1b12bf"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)
{
    // Random real block (0000005817bbfac27f4887fc711b6dfa707e6433a464fe722770e37c80f9daca)
    // With 3 txes
    CBlock block;
    CDataStream stream(ParseHex(""), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);
    // Match the first transaction
    filter.insert(uint256S("0x3dd14005e33207042f3ecb9ac198bf137297ae4dbec84c515bbc6f73d09af774"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x3dd14005e33207042f3ecb9ac198bf137297ae4dbec84c515bbc6f73d09af774"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Match an output from the second transaction (the pubkey for address L1BDVRhZHkwpNcyxwt33NFYZPE3M5LCzcjb)
    // This should not match the third transaction though it spends the output matched
    // It will match the fourth transaction, which has another pay-to-pubkey output to the same address
    filter.insert(ParseHex("261592f28c2b580017b2d32179bb43481b428379"));

    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);

    BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256S("0xde8ace7950d2204eb216481e21b2bf5aeb53633a1fc384140267b8246c1b12bf"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)
{
    // Random real block (000000120ad414907b803dae85ed85af5f1fc9b550f6f1b92d6e28482e3936de)
    // With one tx
    CBlock block;
    CDataStream stream(ParseHex("04000000eca61d86ccf2fd776af57d22b3ae29a2d84587239a4f76e68e2329950a000000904d533e41f21911bac023e5f0aa32675a60d1cc650c95cf031b740a9fabb6fd0000000000000000000000000000000000000000000000000000000000000000e67d685abc74461d0800000f030000000000000000000000000000000000000000000000dc190000fd4005001cc5e437cc126e6c4c70fe03c28a3da1145d072e4108d6e64bd0e339dc70689f9ad07a429650fa59190f73e2dda80e720b0594f37068c59fd77f929ded2e17fb0539a5a0cb7f61bee28552f5b63d2dfedb036000a11eebce61aff76556161736c127725a8f734bbd1d266e6ada96eaeb306175f2d0652692ebe9fd616520469589175c4725d092f57fb0e2fc056890912afa389b3ebe95a17ba3564dc81ae6692af64e66f8604d08ffae3f10110e3cfd8762a88faaf366510c3a8fcf15326f44fae793f17ddba3fca1745d75b7dece0b4a153ac2414494a56580c214a149cb8ebd805038760a22986eaa7a8efc929287130a5849d68a6853d38feb0eaa08fdb3a18e9b2a6ab56ca77b9cb68883353e7d34d0dc3cca3a1f83dbc0e445b76d34756f0d8c76a41284616475deb3b3ae6bd1be0f7fe295d17a76097c1ee1b3cbf5b67ad7ee2f7435a762340588ba4c7329020498ea090694c521d3a1ea936bf416dc72fdac1b1fcac487095a7ab1128e9569ca3eae5e3a5cde874b0301752b7488c0d71fb27056f19359be53f73d97d5079bad5e4a57f8c348b5f22ff59f8f8d90c0b8d14d15f8e643db1b8e7fe4bd33847a65f2a551f6d9d22e340587510215f8c1dd6305ed4cf78a8a35443aa4c243111fb2a4ae515bc4e0a46364b728055c617ec65a4bdff69a1bba8d39fafe35ce99f1da7176da3568b103080caea65c9026f0268067e4e927355f823495862348666e5e892299854c35e16070a55d84214d5d760e5b437e782eb13f7fc634d2c1f5fc2a8d8a76f780289e157c80e079d3442bc6104f5b701222ea970cf70660b0d87410a23ec8e5c424f5c4ae830b997b89a20e609ce25088df47d190a509f8c3fa71c9e9fa18af08b2a2b6e59c4701f9d9816d6e9740ddc16dba5ede0af220b9dd5995eb8cd9b3294664e50e79edf6a45a00e4f67a10c963393c78e0244ef6285cbae4f1dc984c0d0cf094960f23b46bf4c9d6ba2185ee9df87cca01e837f04b53a9ed7df643e7b4b863d9b435f00089206a218603e47b49bd7342e4fd53e5b27be5d7673f034dd2aa76271791c0c247bd0e54aa6f1dc0595ed20b890c883439fb61d423b66b25384ec5dc842fa6fd0b2c44c7bda1921f8f7d5964a1e9d1f746699ae57113b229a96d1b5ac133abd3557be0ce4666419c21ce0795978bc9fa4769e8e5f13ebf99948b07ce7ca88b17b5d71c0eaa95d157b5960391b365ced5aff7cc440dcb64cbf0b42c9fc2bda4ef9b35bdfe7bcf985e154f8036928d191445219fc56f77715f27c8667f6d82173c71f49cccb1855f8ba34b22adf7b21a9eb4f9336b125beab427a01559e1b8cda6d2ccde3dbfd5d2011aca6a7fc61965a950f344595cf790979663ff32ce2283172a231ed1ed86aea2a7744744b5abc25cabb40159d5ba6889055860d380229a5f97565d8dd592e2138502ecc8a00bd705e3535683d89c9eea527bb2093ebd367cbad99481f0f266cc807d97d747191b2d0a41873c823bd332ecbb701534574780bde3c05c52ee02d64aceebe8b9736cc889d56567d4ca864eb74f91128a0eb74a25e689e314215cc78ef38147c5ae33ed0574a9afae5eaa6b15646a5f1dddd20b004fff92fa05bdf7e7c9cb035bfea8a7a4b75b8d0702a81e8375046be6ac1cfae4b5e5e8f0e3dd709f592fed560ab80e003462658d31867b8398d13c7a04ea86e9dc98cf115abcfb6285a47f247cb270b55e3e79b1e459ab863a9d5e4ebee4d7733b55c4354ec368ff1cf59e19040cb50b053bdb95ff0b7b657b362f3f579af3fe24eb2214ab0fdbef0f7ba4eae823a3cfea128ff5fd0d1d1456a2d34113335726d0d18409ee70b1a22b9f478321b50f01ae606a6d9db7c4976e3121276c2d9ce7010101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff31021627005a2d4e4f4d50212068747470733a2f2f6769746875622e636f6d2f6a6f7368756179616275742f7a2d6e6f6d70ffffffff02008d380c010000001976a91482c11e3e18a4033b59a6e0bab12f862f76881aff88ac0065cd1d000000001976a914e3e3b25a494bb954a258ea4118c303568c306e3b88ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the only transaction
    filter.insert(uint256S("0xfdb6ab9f0a741b03cf950c65ccd1605a6732aaf0e523c0ba1119f2413e534d90"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0xfdb6ab9f0a741b03cf950c65ccd1605a6732aaf0e523c0ba1119f2413e534d90"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);
    merkleStream << merkleBlock;

    std::vector<unsigned char> vch = ParseHex("04000000eca61d86ccf2fd776af57d22b3ae29a2d84587239a4f76e68e2329950a000000904d533e41f21911bac023e5f0aa32675a60d1cc650c95cf031b740a9fabb6fd0000000000000000000000000000000000000000000000000000000000000000e67d685abc74461d0800000f030000000000000000000000000000000000000000000000dc190000fd4005001cc5e437cc126e6c4c70fe03c28a3da1145d072e4108d6e64bd0e339dc70689f9ad07a429650fa59190f73e2dda80e720b0594f37068c59fd77f929ded2e17fb0539a5a0cb7f61bee28552f5b63d2dfedb036000a11eebce61aff76556161736c127725a8f734bbd1d266e6ada96eaeb306175f2d0652692ebe9fd616520469589175c4725d092f57fb0e2fc056890912afa389b3ebe95a17ba3564dc81ae6692af64e66f8604d08ffae3f10110e3cfd8762a88faaf366510c3a8fcf15326f44fae793f17ddba3fca1745d75b7dece0b4a153ac2414494a56580c214a149cb8ebd805038760a22986eaa7a8efc929287130a5849d68a6853d38feb0eaa08fdb3a18e9b2a6ab56ca77b9cb68883353e7d34d0dc3cca3a1f83dbc0e445b76d34756f0d8c76a41284616475deb3b3ae6bd1be0f7fe295d17a76097c1ee1b3cbf5b67ad7ee2f7435a762340588ba4c7329020498ea090694c521d3a1ea936bf416dc72fdac1b1fcac487095a7ab1128e9569ca3eae5e3a5cde874b0301752b7488c0d71fb27056f19359be53f73d97d5079bad5e4a57f8c348b5f22ff59f8f8d90c0b8d14d15f8e643db1b8e7fe4bd33847a65f2a551f6d9d22e340587510215f8c1dd6305ed4cf78a8a35443aa4c243111fb2a4ae515bc4e0a46364b728055c617ec65a4bdff69a1bba8d39fafe35ce99f1da7176da3568b103080caea65c9026f0268067e4e927355f823495862348666e5e892299854c35e16070a55d84214d5d760e5b437e782eb13f7fc634d2c1f5fc2a8d8a76f780289e157c80e079d3442bc6104f5b701222ea970cf70660b0d87410a23ec8e5c424f5c4ae830b997b89a20e609ce25088df47d190a509f8c3fa71c9e9fa18af08b2a2b6e59c4701f9d9816d6e9740ddc16dba5ede0af220b9dd5995eb8cd9b3294664e50e79edf6a45a00e4f67a10c963393c78e0244ef6285cbae4f1dc984c0d0cf094960f23b46bf4c9d6ba2185ee9df87cca01e837f04b53a9ed7df643e7b4b863d9b435f00089206a218603e47b49bd7342e4fd53e5b27be5d7673f034dd2aa76271791c0c247bd0e54aa6f1dc0595ed20b890c883439fb61d423b66b25384ec5dc842fa6fd0b2c44c7bda1921f8f7d5964a1e9d1f746699ae57113b229a96d1b5ac133abd3557be0ce4666419c21ce0795978bc9fa4769e8e5f13ebf99948b07ce7ca88b17b5d71c0eaa95d157b5960391b365ced5aff7cc440dcb64cbf0b42c9fc2bda4ef9b35bdfe7bcf985e154f8036928d191445219fc56f77715f27c8667f6d82173c71f49cccb1855f8ba34b22adf7b21a9eb4f9336b125beab427a01559e1b8cda6d2ccde3dbfd5d2011aca6a7fc61965a950f344595cf790979663ff32ce2283172a231ed1ed86aea2a7744744b5abc25cabb40159d5ba6889055860d380229a5f97565d8dd592e2138502ecc8a00bd705e3535683d89c9eea527bb2093ebd367cbad99481f0f266cc807d97d747191b2d0a41873c823bd332ecbb701534574780bde3c05c52ee02d64aceebe8b9736cc889d56567d4ca864eb74f91128a0eb74a25e689e314215cc78ef38147c5ae33ed0574a9afae5eaa6b15646a5f1dddd20b004fff92fa05bdf7e7c9cb035bfea8a7a4b75b8d0702a81e8375046be6ac1cfae4b5e5e8f0e3dd709f592fed560ab80e003462658d31867b8398d13c7a04ea86e9dc98cf115abcfb6285a47f247cb270b55e3e79b1e459ab863a9d5e4ebee4d7733b55c4354ec368ff1cf59e19040cb50b053bdb95ff0b7b657b362f3f579af3fe24eb2214ab0fdbef0f7ba4eae823a3cfea128ff5fd0d1d1456a2d34113335726d0d18409ee70b1a22b9f478321b50f01ae606a6d9db7c4976e3121276c2d9ce7010100000001904d533e41f21911bac023e5f0aa32675a60d1cc650c95cf031b740a9fabb6fd0101");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(), merkleStream.begin(), merkleStream.end());
}

BOOST_AUTO_TEST_CASE(merkle_block_4)
{
    // Random real block (00000029a1ce401cc0cb0f8f28fece1be233e0db83a2c06ec6fbc7166b6560e5)
    // With 3 txes
    CBlock block;
    CDataStream stream(ParseHex(""), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the last transaction
    filter.insert(uint256S("0x3163f31706b76116c675b773e9de2d40de0fbb4393fb63e6cd869793b347beda"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x3163f31706b76116c675b773e9de2d40de0fbb4393fb63e6cd869793b347beda"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 2);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Also match the 2nd transaction
    filter.insert(uint256S("0x005d7aeb6e7a8705c970119187b22b9c03553b0b6ecddd48253b53f8c84feabe"));
    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x005d7aeb6e7a8705c970119187b22b9c03553b0b6ecddd48253b53f8c84feabe"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 1);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)
{
    // Random real block (00000029a1ce401cc0cb0f8f28fece1be233e0db83a2c06ec6fbc7166b6560e5)
    // With 3 txes
    CBlock block;
    CDataStream stream(ParseHex(""), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_P2PUBKEY_ONLY);
    // Match the generation pubkey
    filter.insert(ParseHex("57bc5e7e48328d84194f57667425ae26357bfb3a"));
    // ...and the output address of the 2nd transaction
    filter.insert(ParseHex("f73cb27f2f92294e86a108fcd68ea73af2d10807"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    // We should not match the generation outpoint
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x67367329779f977cfcdd678da283cc2a7cbe354f3397117f2d9dd51dadb786d5"), 0)));
    // ... and not the 2nd transaction's output (its not pay-2-pubkey)
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x005d7aeb6e7a8705c970119187b22b9c03553b0b6ecddd48253b53f8c84feabe"), 0)));
}

BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)
{
    // Random real block (00000029a1ce401cc0cb0f8f28fece1be233e0db83a2c06ec6fbc7166b6560e5)
    // With 3 txes
    CBlock block;
    CDataStream stream(ParseHex(""), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);
    // Match the generation pubkey
    filter.insert(ParseHex("57bc5e7e48328d84194f57667425ae26357bfb3a"));
    // ...and the output address of the 2nd transaction
    filter.insert(ParseHex("f73cb27f2f92294e86a108fcd68ea73af2d10807"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    // We shouldn't match any outpoints (UPDATE_NONE)
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x67367329779f977cfcdd678da283cc2a7cbe354f3397117f2d9dd51dadb786d5"), 0)));
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x005d7aeb6e7a8705c970119187b22b9c03553b0b6ecddd48253b53f8c84feabe"), 0)));
}

static std::vector<unsigned char> RandomData()
{
    uint256 r = InsecureRand256();
    return std::vector<unsigned char>(r.begin(), r.end());
}

BOOST_AUTO_TEST_CASE(rolling_bloom)
{
    SeedInsecureRand(/* deterministic */ true);
    g_mock_deterministic_tests = true;

    // last-100-entry, 1% false positive:
    CRollingBloomFilter rb1(100, 0.01);

    // Overfill:
    static const int DATASIZE=399;
    std::vector<unsigned char> data[DATASIZE];
    for (int i = 0; i < DATASIZE; i++) {
        data[i] = RandomData();
        rb1.insert(data[i]);
    }
    // Last 100 guaranteed to be remembered:
    for (int i = 299; i < DATASIZE; i++) {
        BOOST_CHECK(rb1.contains(data[i]));
    }

    // false positive rate is 1%, so we should get about 100 hits if
    // testing 10,000 random keys. We get worst-case false positive
    // behavior when the filter is as full as possible, which is
    // when we've inserted one minus an integer multiple of nElement*2.
    unsigned int nHits = 0;
    for (int i = 0; i < 10000; i++) {
        if (rb1.contains(RandomData()))
            ++nHits;
    }
    // Expect about 100 hits
    BOOST_CHECK_EQUAL(nHits, 75);

    BOOST_CHECK(rb1.contains(data[DATASIZE-1]));
    rb1.reset();
    BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));

    // Now roll through data, make sure last 100 entries
    // are always remembered:
    for (int i = 0; i < DATASIZE; i++) {
        if (i >= 100)
            BOOST_CHECK(rb1.contains(data[i-100]));
        rb1.insert(data[i]);
        BOOST_CHECK(rb1.contains(data[i]));
    }

    // Insert 999 more random entries:
    for (int i = 0; i < 999; i++) {
        std::vector<unsigned char> d = RandomData();
        rb1.insert(d);
        BOOST_CHECK(rb1.contains(d));
    }
    // Sanity check to make sure the filter isn't just filling up:
    nHits = 0;
    for (int i = 0; i < DATASIZE; i++) {
        if (rb1.contains(data[i]))
            ++nHits;
    }
    // Expect about 5 false positives
    BOOST_CHECK_EQUAL(nHits, 6);

    // last-1000-entry, 0.01% false positive:
    CRollingBloomFilter rb2(1000, 0.001);
    for (int i = 0; i < DATASIZE; i++) {
        rb2.insert(data[i]);
    }
    // ... room for all of them:
    for (int i = 0; i < DATASIZE; i++) {
        BOOST_CHECK(rb2.contains(data[i]));
    }
    g_mock_deterministic_tests = false;
}

BOOST_AUTO_TEST_SUITE_END()
